openapi: 3.0.1
info:
  title: NFTTOOLS API DOCS FOR MAGIC EDEN
  version: 1.0.0
  description: A comprehensive API for interacting with Magic Eden, providing tools to handle collections, tokens, activity, bid, list, and buy on Solana, Bitcoin, Ethereum, Base, and Polygon chains.
servers:
  - url: https://nfttools.pro/magiceden
    description: Production server

tags:
  - name: Solana
    description: Endpoints related to Solana blockchain
  - name: Bitcoin
    description: Endpoints related to Bitcoin blockchain
  - name: EVM
    description: Endpoints related to Ethereum, Polygon and Base blockchain
  - name: Rewards
    description: Check Diamond Rewards Eligibility

security:
  - ApiKeyAuth: []

paths:
  /rewards/diamond/eligibility:
    get:
      summary: Check Diamond Rewards Eligibility
      description: Retrieve the eligibility status for Diamond Rewards for a specific wallet address on a given blockchain.
      tags:
        - Rewards

      security:
        - cookieAuth: []
        - ApiKeyAuth: []
        - bearerAuth: []

      parameters:
        - name: walletAddress
          in: query
          required: true
          schema:
            type: string
          description: The wallet address to check for eligibility
          example: EfdC1uyq5gWqHQYxSENscwNZKY8k2z8CXkpmPRB7mn2N
        - name: chain
          in: query
          required: true
          schema:
            type: string
            enum: [solana, ethereum, polygon, base, bitcoin] # Assuming these are the possible chains
          description: The blockchain on which to check eligibility
          example: solana
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error
  #SOLANA
  /collection_stats/search/solana:
    servers:
      - url: https://nfttools.pro/magiceden_stats
    get:
      summary: Search Solana Collection Stats
      description: Retrieve collection statistics for Solana NFTs on Magic Eden, with options for sorting, filtering, and pagination.
      tags:
        - Solana
      parameters:
        - name: direction
          in: query
          required: true
          schema:
            type: string
            enum: [asc, desc]
          description: The direction to sort the results
          example: desc
        - name: sort
          in: query
          required: true
          schema:
            type: string
            enum: [volume, floorPrice, listedCount] # Assuming these are possible sort options
          description: The field to sort the results by
          example: volume
        - name: window
          in: query
          required: true
          schema:
            type: string
            enum: [1d, 7d, 30d] # Assuming these are the possible values
          description: The time window for the stats
          example: 1d
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100 # Assuming 100 is the maximum allowed
          description: The maximum number of results to return
          example: 100
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
          description: The number of results to skip (for pagination)
          example: 0
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  collections:
                    type: array
                    items:
                      type: object
                      properties:
                        # Define properties of each collection here
                        # This is a placeholder and should be replaced with the actual response structure
                        symbol:
                          type: string
                        name:
                          type: string
                        volume:
                          type: number
                        floorPrice:
                          type: number
                        listedCount:
                          type: integer
                  # Add other top-level properties if they exist in the response
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /rpc/getCollectionHolderStats/{collectionSymbol}:
    get:
      summary: Get Collection Holder Statistics
      description: Retrieve holder statistics for a specific NFT collection on Magic Eden.
      tags:
        - Solana
      parameters:
        - name: collectionSymbol
          in: path
          required: true
          schema:
            type: string
          description: The symbol or identifier of the collection
          example: rugens_drip
        - name: edge_cache
          in: query
          required: false
          schema:
            type: boolean
          description: Whether to use edge caching for the request
          example: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalHolders:
                    type: integer
                    description: Total number of unique holders in the collection
                  uniqueHolders:
                    type: number
                    description: Percentage of unique holders (possibly out of total supply)
                  averageHoldingPerWallet:
                    type: number
                    description: Average number of NFTs held per wallet
                  holdersDistribution:
                    type: object
                    description: Distribution of holders by number of NFTs held
                    properties:
                      "1":
                        type: integer
                        description: Number of wallets holding 1 NFT
                      "2-5":
                        type: integer
                        description: Number of wallets holding 2 to 5 NFTs
                      # Add more ranges as needed
                  # Add other properties that might be in the response
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Collection not found
        "500":
          description: Internal server error

  /idxv2/getAllNftsByCollectionSymbol:
    get:
      summary: Retrieve all NFTs by collection symbol
      tags:
        - Solana
      parameters:
        - name: collectionSymbol
          in: query
          required: true
          schema:
            type: string
          example: rugens_drip
        - name: direction
          in: query
          required: true
          schema:
            type: integer
            enum: [1, -1]
            default: 1
          example: 1
        - name: field
          in: query
          required: true
          schema:
            type: integer
            default: 1
          example: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 1
          example: 1
        - name: token22StandardFilter
          in: query
          required: true
          schema:
            type: integer
            default: 1
          example: 1
        - name: mplCoreStandardFilter
          in: query
          required: true
          schema:
            type: integer
            default: 1
          example: 1
        - name: agg
          in: query
          required: true
          schema:
            type: integer
            default: 3
          example: 3
        - name: compressionMode
          in: query
          required: true
          schema:
            type: string
            enum: [both, compressed, uncompressed]
            default: both
          example: both
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: NFTs not found
        "500":
          description: Internal server error

  /rpc/getNFTsByOwner/{ownerAddress}:
    get:
      summary: Retrieve NFTs by owner
      tags:
        - Solana
      parameters:
        - name: ownerAddress
          in: path
          required: true
          schema:
            type: string
          example: EfdC1uyq5gWqHQYxSENscwNZKY8k2z8CXkpmPRB7mn2N
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: NFTs not found
        "500":
          description: Internal server error

  /rpc/getCollectionAttributesStats/{collectionSymbol}:
    get:
      summary: Retrieve collection attributes stats
      tags:
        - Solana
      parameters:
        - name: collectionSymbol
          in: path
          required: true
          schema:
            type: string
          example: drip_tarimosi
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [all, active, inactive]
            default: all
          example: all
        - name: edge_cache
          in: query
          required: true
          schema:
            type: boolean
            default: true
          example: true
        - name: agg
          in: query
          required: true
          schema:
            type: integer
            default: 3
          example: 3
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: Collection not found
        "500":
          description: Internal server error

  /collections/{collectionSymbol}/organization:
    get:
      summary: Retrieve collection organization details
      tags:
        - Solana
      parameters:
        - name: collectionSymbol
          in: path
          required: true
          schema:
            type: string
          example: drip_tarimosi
        - name: edge_cache
          in: query
          required: true
          schema:
            type: boolean
            default: true
          example: true
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: Collection not found
        "500":
          description: Internal server error

  /sft/collection/{collectionSymbol}:
    get:
      summary: Retrieve collection details with pagination
      tags:
        - Solana
      parameters:
        - name: collectionSymbol
          in: path
          required: true
          schema:
            type: string
          example: drip_tarimosi
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
          example: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
          example: 20
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: Collection not found
        "500":
          description: Internal server error

  /rpc/getCollectionEscrowStats/{collectionSymbol}:
    get:
      summary: Retrieve collection escrow stats
      tags:
        - Solana
      parameters:
        - name: collectionSymbol
          in: path
          required: true
          schema:
            type: string
          example: drip_tarimosi
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [all, active, inactive]
            default: all
          example: all
        - name: edge_cache
          in: query
          required: true
          schema:
            type: boolean
            default: true
          example: true
        - name: agg
          in: query
          required: true
          schema:
            type: integer
            default: 3
          example: 3
        - name: enableFloorWithFee
          in: query
          required: true
          schema:
            type: boolean
            default: true
          example: true
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: Collection not found
        "500":
          description: Internal server error

  /v2/activities:
    get:
      summary: Get Collection Activities
      description: Retrieve activities for a specific NFT collection on Magic Eden, with options for filtering by activity type and pagination.
      tags:
        - Solana
      parameters:
        - name: activityTypes
          in: query
          required: true
          schema:
            type: string
          description: JSON array of activity types to filter by, URL encoded
          example: "%5B%22sale%22%2C%22item_offer%22%2C%22pool_offer%22%2C%22attributes_offer%22%2C%22list%22%2C%22edit_list%22%2C%22delist%22%5D"
        - name: collectionSymbol
          in: query
          required: true
          schema:
            type: string
          description: The symbol or identifier of the collection
          example: drip_tarimosi
        - name: onChainCollectionAddress
          in: query
          required: true
          schema:
            type: string
          description: The on-chain address of the collection
          example: TAuAUS8neSS3KPSqLXQ7u1aWkKgnVPzqNizihDYuXvN
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50 # Assuming 50 is the maximum allowed
          description: The maximum number of results to return
          example: 50
        - name: enableSNS
          in: query
          required: true
          schema:
            type: boolean
          description: Whether to enable SNS (possibly Solana Name Service) resolution
          example: true
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Collection not found
        "500":
          description: Internal server error

  /idxv2/getListedNftsByCollectionSymbol:
    get:
      summary: Retrieve listed NFTs by collection symbol
      tags:
        - Solana
      parameters:
        - name: collectionSymbol
          in: query
          required: true
          schema:
            type: string
          example: drip_tarimosi
        - name: direction
          in: query
          required: false
          schema:
            type: integer
            enum: [1, 2]
            default: 2
          example: 2
        - name: field
          in: query
          required: false
          schema:
            type: integer
            default: 1
          example: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
          example: 100
        - name: token22StandardFilter
          in: query
          required: false
          schema:
            type: integer
            default: 1
          example: 1
        - name: mplCoreStandardFilter
          in: query
          required: false
          schema:
            type: integer
            default: 1
          example: 1
        - name: mode
          in: query
          required: false
          schema:
            type: string
            enum: [all, listed]
            default: all
          example: all
        - name: agg
          in: query
          required: false
          schema:
            type: integer
            default: 3
          example: 3
        - name: compressionMode
          in: query
          required: false
          schema:
            type: string
            enum: [none, both, compressed, uncompressed]
            default: both
          example: both
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: NFTs not found
        "500":
          description: Internal server error

  /collection_watchlists/action/checkUserWatchCollection/{collectionSymbol}:
    get:
      summary: Check if user is watching a collection
      tags:
        - Solana
      parameters:
        - name: collectionSymbol
          in: path
          required: true
          schema:
            type: string
          example: drip_tarimosi
        - name: walletAddress
          in: query
          required: true
          schema:
            type: string
          example: EfdC1uyq5gWqHQYxSENscwNZKY8k2z8CXkpmPRB7mn2N
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: Collection or user not found
        "500":
          description: Internal server error

  /collections/{collectionSymbol}:
    get:
      summary: Retrieve collection details
      tags:
        - Solana
      parameters:
        - name: collectionSymbol
          in: path
          required: true
          schema:
            type: string
          example: drip_tarimosi
        - name: edge_cache
          in: query
          required: false
          schema:
            type: boolean
            default: true
          example: true
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: Collection not found
        "500":
          description: Internal server error

  /idxv2/getBidsByMintAddresses:
    get:
      summary: Retrieve bids by mint addresses
      tags:
        - Solana
      parameters:
        - name: hideExpired
          in: query
          required: false
          schema:
            type: boolean
            default: true
          example: true
        - name: mintAddresses
          in: query
          required: true
          schema:
            type: string
          example: DmdF3ACqvjmRh4mayaw3SAKuttVQ3tZkmut1N4RxSLCG
        - name: direction
          in: query
          required: false
          schema:
            type: integer
            enum: [1, 2]
            default: 1
          example: 1
        - name: field
          in: query
          required: false
          schema:
            type: integer
            default: 2
          example: 2
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 500
          example: 500
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
          example: 0
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: Bids not found
        "500":
          description: Internal server error

  /rpc/getNFTByMintAddress/{mintAddress}:
    get:
      summary: Retrieve NFT by mint address
      tags:
        - Solana
      parameters:
        - name: mintAddress
          in: path
          required: true
          schema:
            type: string
          example: DmdF3ACqvjmRh4mayaw3SAKuttVQ3tZkmut1N4RxSLCG
        - name: agg
          in: query
          required: false
          schema:
            type: integer
            default: 3
          example: 3
        - name: useRarity
          in: query
          required: false
          schema:
            type: boolean
            default: true
          example: true
        - name: includeBurntMint
          in: query
          required: false
          schema:
            type: boolean
            default: true
          example: true
        - name: compressionMode
          in: query
          required: false
          schema:
            type: string
            enum: [none, both, compressed, uncompressed]
            default: both
          example: both
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: NFT not found
        "500":
          description: Internal server error

  /rpc/getNFTStatsByMintAddress/{mintAddress}:
    get:
      summary: Retrieve NFT stats by mint address
      tags:
        - Solana
      parameters:
        - name: mintAddress
          in: path
          required: true
          schema:
            type: string
          example: DmdF3ACqvjmRh4mayaw3SAKuttVQ3tZkmut1N4RxSLCG
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: NFT stats not found
        "500":
          description: Internal server error

  /v2/collections/{symbol}/activities:
    get:
      summary: Retrieve activities for a collection
      tags:
        - Solana
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
          example: drip_tarimosi

      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: Activities not found
        "500":
          description: Internal server error

  /v2/tokens/{token_mint}/listings:
    get:
      summary: Retrieve listings for a token
      tags:
        - Solana
      parameters:
        - name: token_mint
          in: path
          required: true
          schema:
            type: string
          example: DmdF3ACqvjmRh4mayaw3SAKuttVQ3tZkmut1N4RxSLCG

      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: Listings not found
        "500":
          description: Internal server error

  /v2/tokens/{token_mint}/offers_received:
    get:
      summary: Retrieve offers received for a token
      tags:
        - Solana
      parameters:
        - name: token_mint
          in: path
          required: true
          schema:
            type: string
          example: DmdF3ACqvjmRh4mayaw3SAKuttVQ3tZkmut1N4RxSLCG

        - name: min_price
          in: query
          required: false
          schema:
            type: integer
          example: 1000000
        - name: max_price
          in: query
          required: false
          schema:
            type: integer
          example: 100000000
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
          example: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 50
          example: 50
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum:
              - updatedAt
              - bidAmount
          example: updatedAt
        - name: sort_direction
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
          example: desc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  offers:
                    type: array
                    items:
                      type: object
                      properties:
                        price:
                          type: string
                          example: "1000000000"
                        buyer:
                          type: string
                          example: EfdC1uyq5gWqHQYxSENscwNZKY8k2z8CXkpmPRB7mn2N
                        mintAddress:
                          type: string
                          example: DmdF3ACqvjmRh4mayaw3SAKuttVQ3tZkmut1N4RxSLCG
                        timestamp:
                          type: string
                          example: 2023-07-04T12:34:56Z
        "400":
          description: Invalid request
        "404":
          description: Offers not found
        "500":
          description: Internal server error

  /v2/tokens/{token_mint}/activities:
    get:
      summary: Retrieve activities for a token
      tags:
        - Solana
      parameters:
        - name: token_mint
          in: path
          required: true
          schema:
            type: string
          example: DmdF3ACqvjmRh4mayaw3SAKuttVQ3tZkmut1N4RxSLCG

        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
          example: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 50
          example: 50
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: Activities not found
        "500":
          description: Internal server error

  /v2/tokens/{token_mint}:
    get:
      summary: Retrieve token details by mint address
      tags:
        - Solana
      parameters:
        - name: token_mint
          in: path
          required: true
          schema:
            type: string
          example: DmdF3ACqvjmRh4mayaw3SAKuttVQ3tZkmut1N4RxSLCG

      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: Token not found
        "500":
          description: Internal server error

  /v2/collections/batch/listings:
    post:
      summary: Batch retrieve listings for collections
      tags:
        - Solana
      parameters:
        - name: attributes
          in: query
          schema:
            type: string
          description: |
            Array of arrays of objects representing a filtering mechanism.
            Elements within each inner array are logically ORed, and resulting arrays are ANDed together.
            Each inner array consists of objects with properties traitType (string) and value (string).
            Example: [[{"traitType":"trait1", "value":"value1"},{"traitType":"trait1", "value":"value2"}]]
        - name: offset
          required: false
          in: query
          schema:
            type: integer
            example: 0
          description: Offset for pagination
        - name: limit
          required: false
          in: query
          schema:
            type: integer
            example: 50
          description: Number of results per page
        - name: min_price
          in: query
          schema:
            type: integer
            example: 1000000
          description: Minimum price filter
        - name: max_price
          in: query
          schema:
            type: integer
            example: 100000000
          description: Maximum price filter
        - name: sort
          in: query
          schema:
            type: string
            enum:
              - listPrice
              - updatedAt
          example: listPrice
          description: Field to sort the listings
        - name: sort_direction
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
          example: asc
          description: Sort direction for the returned elements
        - name: listingAggMode
          in: query
          schema:
            type: boolean
          example: true
          description: True to return aggregated marketplace listings, false for Magic Eden listings only
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                collections:
                  type: array
                  items:
                    type: object
                    properties:
                      symbol:
                        type: string
                        example: drip_tarimosi
                mcc:
                  type: string
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: Listings not found
        "500":
          description: Internal server error

  /v2/instructions/sell:
    get:
      tags:
        - Solana
      summary: Get sell instructions
      description: Retrieve instructions for selling an NFT on Magic Eden.
      parameters:
        - name: seller
          in: query
          required: true
          schema:
            type: string
          example: EfdC1uyq5gWqHQYxSENscwNZKY8k2z8CXkpmPRB7mn2N
          description: The seller's wallet address.
        - name: auctionHouseAddress
          in: query
          required: true
          schema:
            type: string
          example: E8cU1WiRWjanGxmn96ewBgk9vPTcL6AEZ1t6F6fkgUWe
          description: The address of the auction house.
        - name: tokenMint
          in: query
          required: true
          schema:
            type: string
          example: 7kpQSvaSW5r4usqUHeqXCHK79zj4amadLdv1mpFpDiWR
          description: The mint address of the token.
        - name: tokenAccount
          in: query
          required: true
          schema:
            type: string
          example: HLfiWCHHma8BJDHPLt1q65v2cA4UXQKEswPCT1rEbQi4
          description: The token account address.
        - name: price
          in: query
          required: true
          schema:
            type: number
          example: 1
          description: The price of the token.
      responses:
        "200":
          description: Successful response

        "400":
          description: Invalid parameters

        "500":
          description: Internal server error

  /v2/tx/{txId}:
    post:
      tags:
        - Solana
      summary: Submit signed listing
      parameters:
        - in: path
          name: txId
          required: true
          schema:
            type: string
          description: The transaction ID to retrieve details for.
      requestBody:
        required: false
        content:
          application/json: {} # Assuming JSON payload, adjust content type if necessary
      responses:
        "200":
          description: Successful response

        "400":
          description: Bad request
        "404":
          description: Not found
        "500":
          description: Internal server error

  /v2/instructions/buy:
    get:
      tags:
        - Solana
      summary: Get buy instructions
      parameters:
        - name: buyer
          in: query
          required: true
          schema:
            type: string
          example: EfdC1uyq5gWqHQYxSENscwNZKY8k2z8CXkpmPRB7mn2N
        - name: auctionHouseAddress
          in: query
          required: true
          schema:
            type: string
          example: E8cU1WiRWjanGxmn96ewBgk9vPTcL6AEZ1t6F6fkgUWe
        - name: tokenMint
          in: query
          required: true
          schema:
            type: string
          example: 7kpQSvaSW5r4usqUHeqXCHK79zj4amadLdv1mpFpDiWR
        - name: price
          in: query
          required: true
          schema:
            type: number
          example: 1
      responses:
        "200":
          description: Successful response

  /collection_stats/search/{chain}:
    servers:
      - url: https://nfttools.pro/magiceden_stats
    get:
      summary: Search Magic Eden Collection Stats on Base
      description: Retrieve collection statistics from Magic Eden on the Base network, with options for sorting and filtering.
      tags:
        - EVM
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]
        - name: window
          in: query
          required: true
          schema:
            type: string
            enum: ["1d", "7d", "30d"] # Assuming these are the possible values
          description: The time window for the stats
          example: "1d"
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: The maximum number of results to return
          example: 50
        - name: sort
          in: query
          required: true
          schema:
            type: string
            enum: ["volume", "floorPrice", "listedCount"] # Assuming these are possible sort options
          description: The field to sort the results by
          example: volume
        - name: direction
          in: query
          required: true
          schema:
            type: string
            enum: ["asc", "desc"]
          description: The direction to sort the results
          example: desc
        - name: filter
          in: query
          required: true
          schema:
            type: string
          description: JSON string representing filter criteria
          example: "{}"
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /v3/rtp/{chain}/order/v4:
    post:
      tags:
        - EVM
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]
        - name: signature
          in: query
          required: true
          description: "URI encoded signature e.g signature=${encodeURIComponent(signature)"
          schema:
            type: string
            example: "0xff38d9gfgfd96469e62ad970493f101463a6837644d68487389052ebea11564e5dcf99c5d4a495243afa20e3c5476614d284136160c4gdfg8384a572de1c"
      summary: Submit signed order
      description: This endpoint allows you to submit a signed order on the specified chain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            examples:
              SubmitBidRequest:
                summary: Submit signed bid request
                description: Submits a signed bid order to Magic Eden for processing.
                value:
                  "items":
                    [
                      {
                        "order":
                          {
                            "kind": "payment-processor-v2",
                            "data":
                              {
                                "kind": "collection-offer-approval",
                                "sellerOrBuyer": "0x9adcffff1def95f7e58b587c1a6b06ac6a7ae1e5",
                                "protocol": 0,
                                "cosigner": "0x32da57e736e05f75aa4fae2e9be60fd904492726",
                                "beneficiary": "0x9adcffff1def95f7e58b587c1a6b06ac6a7ae1e5",
                                "marketplace": "0xca9337244b5f04cb946391bc8b8a980e988f9a6a",
                                "fallbackRoyaltyRecipient": "0xf7aa4de9ef448261ec91bdd79cc03b9eb5104a9d",
                                "paymentMethod": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                                "tokenAddress": "0x6aa0e1910353af11f1f21eb5b2e4a0e9b0374d8a",
                                "amount": "1",
                                "itemPrice": "9436369130321426",
                                "expiration": "1723141612",
                                "marketplaceFeeNumerator": "200",
                                "nonce": "69005277841611552456666767078621072521642912468796321438269508217196416860427",
                                "masterNonce": "0",
                                "r": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                "s": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                "v": 0,
                              },
                          },
                        "orderbook": "reservoir",
                      },
                    ]
                  "source": "magiceden.io"

              SubmitListingRequest:
                summary: "Submit Signed List Order"
                description: "Submits a signed list order to Magic Eden for processing."
                value:
                  "items":
                    [
                      {
                        "order":
                          {
                            "kind": "payment-processor-v2",
                            "data":
                              {
                                "kind": "sale-approval",
                                "sellerOrBuyer": "0x9adcffff1def95f7e58b587c1a6b06ac6a7ae1e5",
                                "protocol": 0,
                                "cosigner": "0x32da57e736e05f75aa4fae2e9be60fd904492726",
                                "marketplace": "0xca9337244b5f04cb946391bc8b8a980e988f9a6a",
                                "fallbackRoyaltyRecipient": "0x118dba55d907be00a0e2c77494f2bd012676e3c2",
                                "paymentMethod": "0x0000000000000000000000000000000000000000",
                                "tokenAddress": "0xa4991609c508b6d4fb7156426db0bd49fe298bd8",
                                "tokenId": "3012",
                                "amount": "1",
                                "itemPrice": "999990000000000000",
                                "expiration": "1723142940",
                                "marketplaceFeeNumerator": "200",
                                "maxRoyaltyFeeNumerator": "500",
                                "nonce": "69005277841611552456666767078621072521642912468796321438269508217196416860429",
                                "masterNonce": "0",
                                "r": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                "s": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                "v": 0,
                              },
                          },
                        "orderbook": "reservoir",
                      },
                    ]
                  "source": "magiceden.io"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order processed successfully

  /v3/rtp/{chain}/execute/bid/v5:
    post:
      tags:
        - EVM
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]
      summary: Submit bid request
      description: Use this endpoint to submit a bid request for an NFT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maker:
                  type: string
                  example: "0xb71425024868e0c9156c3942AC115Cd3b56d5559"
                source:
                  type: string
                  example: magiceden.io
                params:
                  type: array
                  items:
                    type: object
                    properties:
                      collection:
                        type: string
                        example: "0x00b5f2e672f6b8a176bf6ade71238b61360a29e9"
                      currency:
                        type: string
                        example: "0x4200000000000000000000000000000000000006"
                      quantity:
                        type: integer
                        example: 1
                      weiPrice:
                        type: string
                        example: "100000000000000"
                      expirationTime:
                        type: string
                        example: "1722607020"
                      orderKind:
                        type: string
                        example: payment-processor-v2
                      orderbook:
                        type: string
                        example: reservoir
                      options:
                        type: object
                        properties:
                          payment-processor-v2:
                            type: object
                            properties:
                              useOffChainCancellation:
                                type: boolean
                                example: true
                      automatedRoyalties:
                        type: boolean
                        example: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object

                example:
                  "steps":
                    [
                      {
                        "id": "currency-wrapping",
                        "action": "Wrapping currency",
                        "description": "We'll ask your approval to wrap the currency for bidding. Gas fee required.",
                        "kind": "transaction",
                        "items":
                          [
                            {
                              "status": "incomplete",
                              "data":
                                {
                                  "from": "0x9adcffff1def95f7e58b587c1a6b06ac6a7ae1e5",
                                  "to": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                                  "data": "0xd0e30db0",
                                  "value": "0x1bb8446bdac042",
                                },
                              "orderIndexes": [0],
                            },
                          ],
                      },
                      {
                        "id": "currency-approval",
                        "action": "Approve currency",
                        "description": "We'll ask your approval for the exchange to access your token. This is a one-time only operation per exchange.",
                        "kind": "transaction",
                        "items":
                          [{ "status": "complete", "orderIndexes": [0] }],
                      },
                      {
                        "id": "auth-transaction",
                        "action": "On-chain verification",
                        "description": "Some marketplaces require triggering an auth transaction before filling",
                        "kind": "transaction",
                        "items": [],
                      },
                      {
                        "id": "currency-permit",
                        "action": "Sign permits",
                        "description": "Sign permits for accessing the tokens in your wallet",
                        "kind": "signature",
                        "items": [],
                      },
                      {
                        "id": "order-signature",
                        "action": "Authorize offer",
                        "description": "A free off-chain signature to create the offer",
                        "kind": "signature",
                        "items":
                          [
                            {
                              "status": "incomplete",
                              "data":
                                {
                                  "sign":
                                    {
                                      "signatureKind": "eip712",
                                      "domain":
                                        {
                                          "name": "PaymentProcessor",
                                          "version": "2",
                                          "chainId": 1,
                                          "verifyingContract": "0x9a1d00bed7cd04bcda516d721a596eb22aac6834",
                                        },
                                      "types":
                                        {
                                          "CollectionOfferApproval":
                                            [
                                              {
                                                "name": "protocol",
                                                "type": "uint8",
                                              },
                                              {
                                                "name": "cosigner",
                                                "type": "address",
                                              },
                                              {
                                                "name": "buyer",
                                                "type": "address",
                                              },
                                              {
                                                "name": "beneficiary",
                                                "type": "address",
                                              },
                                              {
                                                "name": "marketplace",
                                                "type": "address",
                                              },
                                              {
                                                "name": "fallbackRoyaltyRecipient",
                                                "type": "address",
                                              },
                                              {
                                                "name": "paymentMethod",
                                                "type": "address",
                                              },
                                              {
                                                "name": "tokenAddress",
                                                "type": "address",
                                              },
                                              {
                                                "name": "amount",
                                                "type": "uint256",
                                              },
                                              {
                                                "name": "itemPrice",
                                                "type": "uint256",
                                              },
                                              {
                                                "name": "expiration",
                                                "type": "uint256",
                                              },
                                              {
                                                "name": "marketplaceFeeNumerator",
                                                "type": "uint256",
                                              },
                                              {
                                                "name": "nonce",
                                                "type": "uint256",
                                              },
                                              {
                                                "name": "masterNonce",
                                                "type": "uint256",
                                              },
                                            ],
                                        },
                                      "value":
                                        {
                                          "protocol": 0,
                                          "cosigner": "0x32da57e736e05f75aa4fae2e9be60fd904492726",
                                          "buyer": "0x9adcffff1def95f7e58b587c1a6b06ac6a7ae1e5",
                                          "beneficiary": "0x9adcffff1def95f7e58b587c1a6b06ac6a7ae1e5",
                                          "marketplace": "0xca9337244b5f04cb946391bc8b8a980e988f9a6a",
                                          "fallbackRoyaltyRecipient": "0xf7aa4de9ef448261ec91bdd79cc03b9eb5104a9d",
                                          "paymentMethod": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                                          "tokenAddress": "0x6aa0e1910353af11f1f21eb5b2e4a0e9b0374d8a",
                                          "amount": "1",
                                          "itemPrice": "7802428377972802",
                                          "expiration": "1723208469",
                                          "marketplaceFeeNumerator": "200",
                                          "nonce": "69005277841611552456666767078621072521642912468796321438269508217196416860430",
                                          "masterNonce": "0",
                                        },
                                      "primaryType": "CollectionOfferApproval",
                                    },
                                  "post":
                                    {
                                      "endpoint": "/order/v4",
                                      "method": "POST",
                                      "body":
                                        {
                                          "items":
                                            [
                                              {
                                                "order":
                                                  {
                                                    "kind": "payment-processor-v2",
                                                    "data":
                                                      {
                                                        "kind": "collection-offer-approval",
                                                        "protocol": 0,
                                                        "cosigner": "0x32da57e736e05f75aa4fae2e9be60fd904492726",
                                                        "sellerOrBuyer": "0x9adcffff1def95f7e58b587c1a6b06ac6a7ae1e5",
                                                        "marketplace": "0xca9337244b5f04cb946391bc8b8a980e988f9a6a",
                                                        "paymentMethod": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                                                        "tokenAddress": "0x6aa0e1910353af11f1f21eb5b2e4a0e9b0374d8a",
                                                        "amount": "1",
                                                        "itemPrice": "7802428377972802",
                                                        "expiration": "1723208469",
                                                        "marketplaceFeeNumerator": "200",
                                                        "nonce": "69005277841611552456666767078621072521642912468796321438269508217196416860430",
                                                        "masterNonce": "0",
                                                        "fallbackRoyaltyRecipient": "0xf7aa4de9ef448261ec91bdd79cc03b9eb5104a9d",
                                                        "beneficiary": "0x9adcffff1def95f7e58b587c1a6b06ac6a7ae1e5",
                                                        "v": 0,
                                                        "r": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                        "s": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                      },
                                                  },
                                                "collection": "0x6aa0e1910353af11f1f21eb5b2e4a0e9b0374d8a",
                                                "isNonFlagged": false,
                                                "orderbook": "reservoir",
                                              },
                                            ],
                                          "source": "magiceden.io",
                                        },
                                    },
                                },
                              "orderIndexes": [0],
                            },
                          ],
                      },
                    ]
                  "errors": []

  /v3/rtp/{chain}/execute/list/v5:
    post:
      tags:
        - EVM
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]
      summary: Submit listing request
      description: Use this endpoint to submit a listing request for an NFT on the specified chain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maker:
                  type: string
                  example: "0xb71425024868e0c9156c3942AC115Cd3b56d5559"
                source:
                  type: string
                  example: magiceden.io
                params:
                  type: array
                  items:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "0x9db39ac416c5ec75c2c3ae622d2013ecccc2d74a:9310"
                      weiPrice:
                        type: string
                        example: "10000000000000"
                      orderbook:
                        type: string
                        example: reservoir
                      orderKind:
                        type: string
                        example: payment-processor-v2
                      quantity:
                        type: integer
                        example: 1
                      currency:
                        type: string
                        example: "0x0000000000000000000000000000000000000000"
                      expirationTime:
                        type: string
                        example: "1722598814"
                      automatedRoyalties:
                        type: boolean
                        example: true
                      options:
                        type: object
                        properties:
                          payment-processor-v2:
                            type: object
                            properties:
                              useOffChainCancellation:
                                type: boolean
                                example: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
              example:
                "steps":
                  [
                    {
                      "id": "nft-approval",
                      "action": "Approve NFT contract",
                      "description": "Each NFT collection you want to trade requires a one-time approval transaction",
                      "kind": "transaction",
                      "items":
                        [
                          {
                            "status": "incomplete",
                            "data":
                              {
                                "from": "0x9adcffff1def95f7e58b587c1a6b06ac6a7ae1e5",
                                "to": "0xa4991609c508b6d4fb7156426db0bd49fe298bd8",
                                "data": "0xa22cb4650000000000000000000000009a1d00bed7cd04bcda516d721a596eb22aac68340000000000000000000000000000000000000000000000000000000000000001",
                              },
                            "orderIndexes": [0],
                          },
                        ],
                    },
                    {
                      "id": "order-signature",
                      "action": "Authorize listing",
                      "description": "A free off-chain signature to create the listing",
                      "kind": "signature",
                      "items":
                        [
                          {
                            "status": "incomplete",
                            "data":
                              {
                                "sign":
                                  {
                                    "signatureKind": "eip712",
                                    "domain":
                                      {
                                        "name": "PaymentProcessor",
                                        "version": "2",
                                        "chainId": 1,
                                        "verifyingContract": "0x9a1d00bed7cd04bcda516d721a596eb22aac6834",
                                      },
                                    "types":
                                      {
                                        "SaleApproval":
                                          [
                                            {
                                              "name": "protocol",
                                              "type": "uint8",
                                            },
                                            {
                                              "name": "cosigner",
                                              "type": "address",
                                            },
                                            {
                                              "name": "seller",
                                              "type": "address",
                                            },
                                            {
                                              "name": "marketplace",
                                              "type": "address",
                                            },
                                            {
                                              "name": "fallbackRoyaltyRecipient",
                                              "type": "address",
                                            },
                                            {
                                              "name": "paymentMethod",
                                              "type": "address",
                                            },
                                            {
                                              "name": "tokenAddress",
                                              "type": "address",
                                            },
                                            {
                                              "name": "tokenId",
                                              "type": "uint256",
                                            },
                                            {
                                              "name": "amount",
                                              "type": "uint256",
                                            },
                                            {
                                              "name": "itemPrice",
                                              "type": "uint256",
                                            },
                                            {
                                              "name": "expiration",
                                              "type": "uint256",
                                            },
                                            {
                                              "name": "marketplaceFeeNumerator",
                                              "type": "uint256",
                                            },
                                            {
                                              "name": "maxRoyaltyFeeNumerator",
                                              "type": "uint256",
                                            },
                                            {
                                              "name": "nonce",
                                              "type": "uint256",
                                            },
                                            {
                                              "name": "masterNonce",
                                              "type": "uint256",
                                            },
                                          ],
                                      },
                                    "value":
                                      {
                                        "protocol": 0,
                                        "cosigner": "0x32da57e736e05f75aa4fae2e9be60fd904492726",
                                        "seller": "0x9adcffff1def95f7e58b587c1a6b06ac6a7ae1e5",
                                        "marketplace": "0xca9337244b5f04cb946391bc8b8a980e988f9a6a",
                                        "fallbackRoyaltyRecipient": "0x118dba55d907be00a0e2c77494f2bd012676e3c2",
                                        "paymentMethod": "0x0000000000000000000000000000000000000000",
                                        "tokenAddress": "0xa4991609c508b6d4fb7156426db0bd49fe298bd8",
                                        "tokenId": "3012",
                                        "amount": "1",
                                        "itemPrice": "999990000000000000",
                                        "expiration": "1723209074",
                                        "marketplaceFeeNumerator": "200",
                                        "maxRoyaltyFeeNumerator": "500",
                                        "nonce": "69005277841611552456666767078621072521642912468796321438269508217196416860431",
                                        "masterNonce": "0",
                                      },
                                    "primaryType": "SaleApproval",
                                  },
                                "post":
                                  {
                                    "endpoint": "/order/v4",
                                    "method": "POST",
                                    "body":
                                      {
                                        "items":
                                          [
                                            {
                                              "order":
                                                {
                                                  "kind": "payment-processor-v2",
                                                  "data":
                                                    {
                                                      "kind": "sale-approval",
                                                      "protocol": 0,
                                                      "cosigner": "0x32da57e736e05f75aa4fae2e9be60fd904492726",
                                                      "sellerOrBuyer": "0x9adcffff1def95f7e58b587c1a6b06ac6a7ae1e5",
                                                      "marketplace": "0xca9337244b5f04cb946391bc8b8a980e988f9a6a",
                                                      "paymentMethod": "0x0000000000000000000000000000000000000000",
                                                      "tokenAddress": "0xa4991609c508b6d4fb7156426db0bd49fe298bd8",
                                                      "amount": "1",
                                                      "itemPrice": "999990000000000000",
                                                      "expiration": "1723209074",
                                                      "marketplaceFeeNumerator": "200",
                                                      "nonce": "69005277841611552456666767078621072521642912468796321438269508217196416860431",
                                                      "masterNonce": "0",
                                                      "fallbackRoyaltyRecipient": "0x118dba55d907be00a0e2c77494f2bd012676e3c2",
                                                      "maxRoyaltyFeeNumerator": "500",
                                                      "tokenId": "3012",
                                                      "v": 0,
                                                      "r": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                      "s": "0x0000000000000000000000000000000000000000000000000000000000000000",
                                                    },
                                                },
                                              "orderbook": "reservoir",
                                            },
                                          ],
                                        "source": "magiceden.io",
                                      },
                                  },
                              },
                            "orderIndexes": [0],
                          },
                        ],
                    },
                  ]
                "errors": []

  /v3/rtp/{chain}/collections/0x9db39ac416c5ec75c2c3ae622d2013ecccc2d74a/marketplace-configurations/v2:
    get:
      tags:
        - EVM
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]
      summary: Get Marketplace configuration
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

  /v3/rtp/{chain}/collections-sets/v1:
    post:
      tags:
        - EVM
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]
      summary: Get Collection Set Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                collections:
                  type: array
                  items:
                    type: string
                    example: "0x9db39ac416c5ec75c2c3ae622d2013ecccc2d74a"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

  /v3/rtp/{chain}/users/{address}/tokens/v10:
    get:
      summary: Retrieve user tokens
      tags:
        - EVM
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]

        - name: address
          in: path
          required: true
          schema:
            type: string
          example: "0xb71425024868e0c9156c3942AC115Cd3b56d5559"
        - name: includeLastSale
          in: query
          required: false
          schema:
            type: boolean
            default: true
          example: true
        - name: excludeSpam
          in: query
          required: false
          schema:
            type: boolean
            default: true
          example: true
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 50
          example: 50
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [acquiredAt, price]
            default: acquiredAt
          example: acquiredAt
        - name: sortDirection
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          example: desc
        - name: onlyListed
          in: query
          required: false
          schema:
            type: boolean
            default: false
          example: false
        - name: normalizeRoyalties
          in: query
          required: false
          schema:
            type: boolean
            default: false
          example: false
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: User not found
        "500":
          description: Internal server error

  /v3/rtp/{chain}/tokens/{token}/activity/v5:
    get:
      tags:
        - EVM
      summary: Retrieve token activity
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]
        - name: token
          in: path
          required: true
          schema:
            type: string
          example: "0x9db39ac416c5ec75c2c3ae622d2013ecccc2d74a:9310"
        - name: types
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          example:
            [
              "sale",
              "ask",
              "transfer",
              "mint",
              "bid",
              "bid_cancel",
              "ask_cancel",
            ]
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [eventTimestamp]
            default: eventTimestamp
          example: eventTimestamp
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: Token not found
        "500":
          description: Internal server error

  /v3/rtp/{chain}/orders/asks/v5:
    get:
      tags:
        - EVM
      summary: Retrieve active ask orders
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]
        - name: token
          in: header
          required: true
          schema:
            type: string
          example: "0xcb28749c24af4797808364d71d71539bc01e76d4:4865"
        - name: status
          in: header
          required: false
          schema:
            type: string
          example: active
        - name: sortBy
          in: header
          required: false
          schema:
            type: string
          example: price
        - name: excludeEOA
          in: header
          required: true
          schema:
            type: boolean
          example: false
        - name: limit
          in: header
          required: false
          schema:
            type: integer
          example: 100
        - name: normalizeRoyalties
          in: header
          required: true
          schema:
            type: boolean
          example: false
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "401":
          description: Unauthorized - Token invalid or expired
        "500":
          description: Internal server error
  /v3/rtp/{chain}/orders/bids/v6:
    get:
      summary: Retrieve bids for a collection
      description: Get detailed information about active bids for a specific collection, including criteria metadata and depth.
      tags:
        - EVM
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]
        - name: collection
          in: query
          required: true
          schema:
            type: string
          description: The address of the collection
          example: "0x5ca0c41a50fcfec85b91bb4ca5b024b36d9bb120"
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [price]
          description: The field to sort the results by
        - name: status
          required: false
          in: query
          schema:
            type: string
            enum: [active]
          description: The status of the bids to retrieve
        - name: excludeEOA
          in: query
          schema:
            type: boolean
          description: Whether to exclude EOA (Externally Owned Account) bids
        - name: includeCriteriaMetadata
          in: query
          schema:
            type: boolean
          description: Whether to include criteria metadata
        - name: includeDepth
          in: query
          schema:
            type: boolean
          description: Whether to include depth information
        - name: normalizeRoyalties
          in: query
          schema:
            type: boolean
          description: Whether to normalize royalties
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                # Define the response schema here
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /v3/rtp/{chain}/users/{address}/collections/v4:
    get:
      summary: Retrieve user's collections
      description: Get detailed information about collections owned by a specific user address.
      tags:
        - EVM
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]
        - name: address
          in: path
          required: true
          schema:
            type: string
          description: The address of the user
          example: "0xb71425024868e0c9156c3942AC115Cd3b56d5559"
        - name: offset
          required: false
          in: query
          schema:
            type: integer
            minimum: 0
          description: The number of items to skip before starting to collect the result set
        - name: limit
          required: false
          in: query
          schema:
            type: integer
            minimum: 1
          description: The numbers of items to return
        - name: collection
          in: query
          schema:
            type: string
          description: The address of a specific collection to filter by
          example: "0x9db39ac416c5ec75c2c3ae622d2013ecccc2d74a"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                # Define the response schema here
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /v3/rtp/{chain}/collections/{collectionAddress}/attributes/all/v4:
    get:
      summary: Retrieve all attributes for a collection
      description: Get detailed information about all attributes associated with a specific collection.
      tags:
        - EVM
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]
        - name: collectionAddress
          in: path
          required: true
          schema:
            type: string
          description: The address of the collection
          example: "0x5ca0c41a50fcfec85b91bb4ca5b024b36d9bb120"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                # Define the response schema here
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /v3/rtp/{chain}/collections/v7:
    get:
      summary: Retrieve collection information
      description: Get detailed information about specific collections, including sales count, floor price, and other metadata.
      tags:
        - EVM
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]
        - name: id
          in: query
          required: true
          schema:
            type: string
          description: The address of the collection
          example: "0x5ca0c41a50fcfec85b91bb4ca5b024b36d9bb120"
        - name: limit
          required: false
          in: query
          schema:
            type: integer
            minimum: 1
          description: The number of items to return
        - name: includeSalesCount
          in: query
          schema:
            type: boolean
          description: Whether to include the sales count
        - name: excludeSpam
          in: query
          schema:
            type: boolean
          description: Whether to exclude spam collections
        - name: displayCurrency
          in: query
          schema:
            type: string
          description: The address of the currency to display prices in
          example: "0x4200000000000000000000000000000000000006"
        - name: normalizeRoyalties
          in: query
          schema:
            type: boolean
          description: Whether to normalize royalties
        - name: includeQuantity
          in: query
          schema:
            type: boolean
          description: Whether to include quantity information
        - name: includeLastSale
          in: query
          schema:
            type: boolean
          description: Whether to include the last sale information
        - name: excludeBurnt
          in: query
          schema:
            type: boolean
          description: Whether to exclude burnt tokens
        - name: sortBy
          required: false
          in: query
          schema:
            type: string
            enum: [floorAskPrice]
          description: The field to sort the results by
        - name: sortDirection
          in: query
          schema:
            type: string
            enum: [desc, asc]
          description: The direction to sort the results
        - name: includeAttributes
          in: query
          schema:
            type: boolean
          description: Whether to include attribute information
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                # Define the response schema here
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /v3/rtp/{chain}/collections/activity/v6:
    get:
      summary: Fetch collection activity
      tags:
        - EVM
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]
        - in: query
          name: collection
          required: true
          schema:
            type: string
            example: "0x306b1ea3ecdf94ab739f1910bbda052ed4a9f949"
          description: The Ethereum collection address
        - in: query
          name: types
          required: true
          schema:
            type: array
            items:
              type: string
              enum: ["sale", "ask", "bid", "transfer", "mint"]
          description: |
            Types of activities to fetch. Can include multiple types (sale, ask, bid, transfer, mint).
      responses:
        "200":
          description: Successful response

        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Bad request parameters

  /v3/rtp/{chain}/tokens/v7:
    get:
      tags:
        - EVM
      summary: Fetch Ethereum Tokens
      description: Fetches Ethereum tokens from the specified collection with various filters and sorting options.
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]

        - name: includeQuantity
          in: query
          required: false
          schema:
            type: boolean
          description: Whether to include quantity.
        - name: includeLastSale
          in: query
          required: false
          schema:
            type: boolean
          description: Whether to include the last sale.
        - name: excludeSpam
          in: query
          required: false
          schema:
            type: boolean
          description: Whether to exclude spam tokens.
        - name: excludeBurnt
          in: query
          required: false
          schema:
            type: boolean
          description: Whether to exclude burnt tokens.
        - name: collection
          in: query
          required: true
          schema:
            type: string
          description: The collection contract address.
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [floorAskPrice, otherPossibleSortFields]
            default: floorAskPrice
          description: The field to sort by.
        - name: sortDirection
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: The direction to sort the results.
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 50
            minimum: 1
          description: The number of results to return.
        - name: includeAttributes
          in: query
          required: false
          schema:
            type: boolean
          description: Whether to include attributes.
        - name: normalizeRoyalties
          in: query
          required: false
          schema:
            type: boolean
          description: Whether to normalize royalties.
      responses:
        "200":
          description: A list of Ethereum tokens.
        "400":
          description: Bad Request
        "500":
          description: Server Error

  /auth/user/{walletAddress}:
    get:
      summary: Fetch user authentication data
      tags:
        - General
      parameters:
        - in: path
          name: walletAddress
          required: true
          schema:
            type: string
          description: The wallet address of the user
        - in: query
          name: enableSNS
          schema:
            type: boolean
          required: false
          description: Flag to enable SNS (Social Network Sharing)
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Not found

  /v2/ord/btc/activities:
    get:
      summary: Retrieve Ordinal activities from Magic Eden
      tags:
        - Bitcoin
      parameters:
        - name: limit
          required: false
          in: query
          schema:
            type: integer
            example: 100
          description: Number of results to return (default is 100)
        - name: collectionSymbol
          in: query
          required: true
          schema:
            type: string
            example: nodemonkes
          description: Symbol of the NFT collection
        - name: kind
          in: query
          schema:
            type: string
            items:
              type: string
            example:
              [
                "list",
                "offer_placed",
                "buying_broadcasted",
                "offer_accepted_broadcasted",
              ]
          explode: true
          description: |
            Array of activity types to include.
            Possible values: list, offer_placed, buying_broadcasted, offer_accepted_broadcasted
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  activities:
                    type: array
                    items:
                      type: object
                      properties:
                        activityType:
                          type: string
                          example: offer_placed
                        timestamp:
                          type: string
                          format: date-time
                          example: "2023-07-04T12:34:56Z"
                        details:
                          type: object
                          description: Additional details specific to the activity type
        "400":
          description: Invalid request
        "404":
          description: Activities not found
        "500":
          description: Internal server error

  /v2/ord/btc/tokens:
    get:
      summary: Retrieve BTC tokens from Magic Eden
      tags:
        - Bitcoin
      parameters:
        - name: limit
          required: false
          in: query
          schema:
            type: integer
            example: 40
          description: Number of tokens to return (default is determined dynamically)
        - name: offset
          required: false
          in: query
          schema:
            type: integer
            example: 0
          description: Number of tokens to skip
        - name: sortBy
          required: false
          in: query
          schema:
            type: string
            enum: [priceAsc, priceDesc, updatedAt]
            example: priceAsc
          description: Field to sort tokens by
        - name: minPrice
          in: query
          schema:
            type: number
            example: 0
          description: Minimum price filter
        - name: maxPrice
          in: query
          schema:
            type: number
            example: 0
          description: Maximum price filter
        - name: collectionSymbol
          in: query
          schema:
            type: string
            example: nodemonkes
          description: Symbol of the NFT collection
        - name: disablePendingTransactions
          in: query
          schema:
            type: boolean
            example: true
          description: Disable fetching pending transactions
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    description: "Define the structure of the response data as per your application's needs"
        "400":
          description: Invalid request
        "404":
          description: Tokens not found
        "500":
          description: Internal server error

  /v2/ord/btc/attributes:
    get:
      summary: Retrieve BTC attributes from Magic Eden
      tags:
        - Bitcoin
      parameters:
        - name: attributes
          in: query
          schema:
            type: string
            example: "%5B%7B%22traitType%22%3A%22color%22%2C%22value%22%3A%22blue%22%7D%2C%7B%22traitType%22%3A%22rarity%22%2C%22value%22%3A%22legendary%22%7D%5D"
          description: Encoded JSON string of transformed attributes
        - name: collectionSymbol
          in: query
          schema:
            type: string
            example: nodemonkes
          description: Symbol of the NFT collection
        - name: disablePendingTransactions
          in: query
          schema:
            type: boolean
            example: true
          description: Disable fetching pending transactions
        - name: limit
          required: false
          in: query
          schema:
            type: integer
            example: 100
          description: Number of attributes to return (default is determined dynamically)
        - name: offset
          required: false
          in: query
          schema:
            type: integer
            example: 0
          description: Number of attributes to skip
        - name: sortBy
          required: false
          in: query
          schema:
            type: string
            enum: [priceAsc, priceDesc, updatedAt]
            example: priceAsc
          description: Field to sort attributes by
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    description: Define the structure of the response data as per your application's needs
        "400":
          description: Invalid request
        "404":
          description: Attributes not found
        "500":
          description: Internal server error

  /v2/ord/btc/tokens/{tokenId}:
    get:
      summary: Retrieve BTC token by tokenId
      tags:
        - Bitcoin
      parameters:
        - name: tokenId
          in: path
          required: true
          schema:
            type: string
            example: ccfb3ea4e5de0caf3236a2073ed6d3365e6b0d5be0c22aa38b2071ac8db644bfi0
          description: Example token ID for Magic Eden
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: Token not found
        "500":
          description: Internal server error

  /v2/ord/btc/stat:
    get:
      summary: Retrieve BTC collection statistics
      tags:
        - Bitcoin
      parameters:
        - name: collectionSymbol
          in: query
          required: true
          schema:
            type: string
            example: nodemonkes
          description: Symbol of the collection for BTC statistics
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: Collection not found
        "500":
          description: Internal server error
  /collection_stats/search/bitcoin:
    servers:
      - url: https://nfttools.pro/magiceden_stats
    get:
      summary: Search Bitcoin collection statistics
      tags:
        - Bitcoin
      parameters:
        - name: window
          in: query
          schema:
            type: string
            example: 7d
          description: Time window for statistics aggregation
        - name: limit
          required: false
          in: query
          schema:
            type: integer
            example: 100
          description: Maximum number of results to return
        - name: offset
          required: false
          in: query
          schema:
            type: integer
            example: 0
          description: Number of results to skip before returning data
        - name: sort
          in: query
          schema:
            type: string
            example: volume
          description: Field to sort results by
        - name: direction
          in: query
          schema:
            type: string
            example: desc
          description: Sort direction (asc or desc)
        - name: filter
          in: query
          schema:
            type: string
            example: '{"timeWindow":"7d","collectionType":"all","sortColumn":"volume","sortDirection":"desc","featuredCollection":false}'
          description: JSON string representing additional filters
      responses:
        "200":
          description: Successful response
        "400":
          description: Invalid request
        "404":
          description: Not found
        "500":
          description: Internal server error

  /v2/ord/btc/collection-offers/psbt/cancel:
    get:
      summary: Cancel Collection Offers
      tags:
        - Bitcoin
      parameters:
        - name: offerIds
          in: query
          schema:
            type: array
            items:
              type: string
            description: Array of offer IDs to be cancelled
            example: "6de493e5-4f1d-437d-8aa8-b87368dbe5ab"
        - name: makerPublicKey
          in: query
          schema:
            type: string
            description: Maker's public key
        - name: makerPaymentType
          in: query
          schema:
            type: string
            description: Payment type of the maker
            example: p2wpkh
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
              example:
                offerIds: ["abeddc46-6f95-49dd-a604-003807579ea2"]
                psbtBase64: "cHNidP8BAFICAAAAAW6fp74E08B6FEyvzB+cuoGTkpMPQ4ix0y+T0XqPQmk1AAAAAAD/////AVDDAAAAAAAAFgAUr96ckiK89gXZZ42shVnd2OkOLnsAAAAACPwCbWUDc2lnQCcsS86n4Xg3VNQ9IJEIRwELzxUtoYe4G2BA3o831VllJQJhV2H0nUdX5Mz/QSa5zGZPp5W5qJh2YUTy3l7FWH4L/AJtZQZzaWdleHAIQnkTg19FAAAZ/AJtZRRtZC1jb2xsZWN0aW9uOnN5bWJvbAZjYW5jZWwAAQEfUMMAAAAAAAAWABSv3pySIrz2BdlnjayFWd3Y6Q4uewAA"

        "400":
          description: Invalid request
        "404":
          description: Not found
        "500":
          description: Internal server error

    post:
      summary: Cancel Collection Offers
      tags:
        - Bitcoin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                makerPublicKey:
                  type: string
                  description: Maker's public key
                  example: "0300db232186bd7de491b45d5e703d6aebaf926b0c........."
                offerIds:
                  type: array
                  items:
                    type: string
                  description: Array of offer IDs to be cancelled
                  example:
                    [
                      "6de493e5-4f1d-437d-8aa8-b87368dbe5ab",
                      "6de493e5-4f1d-437d-8aa8-b87368dbe5ab",
                    ]
                signedPsbtBase64:
                  type: string
                  description: Signed PSBT in Base64 format
                  example: "cHNidP8BAHcCAAAAAZX6s......."
                makerPaymentType:
                  type: string
                  description: Payment type of the maker
                  example: "p2wpkh"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object

              example:
                offerIds: ["abeddc46-6f95-49dd-a604-003807579ea2"]
                ok: true
        "400":
          description: Invalid request
        "404":
          description: Not found
        "500":
          description: Internal server error

  /v2/ord/btc/collection-offers/psbt/create:
    get:
      summary: Create Collection Offers
      tags:
        - Bitcoin
      parameters:
        - name: collectionSymbol
          in: query
          required: true
          schema:
            type: string
          example: nodemonkes
        - name: quantity
          in: query
          required: true
          schema:
            type: integer
          example: 1
        - name: priceSats
          in: query
          required: true
          schema:
            type: integer
          example: 100000
        - name: expirationAt
          in: query
          required: true
          schema:
            type: string
            format: date-time
          example: "2024-12-31T23:59:59Z"
        - name: feeSatsPerVbyte
          in: query
          required: true
          schema:
            type: integer
          example: 5
        - name: makerPublicKey
          in: query
          required: true
          schema:
            type: string
          example: "0600db232186bd7de491b45g5e703d6aebaf976b0ce52d721640a1bd3f1f110752"
        - name: makerPaymentType
          in: query
          required: true
          schema:
            type: string
            enum: [p2wpkh, p2sh, p2pkh]
          example: p2wpkh
        - name: makerReceiveAddress
          in: query
          required: true
          schema:
            type: string
          example: "bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8jzg5"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
              example:
                offers:
                  [
                    {
                      psbtBase64: "cHNidP8BAH0CAAAAAW6fp74E08B6FEyvzB+cuoGTkpMPQ4ix0y+T0XqPQmk1AAAAAAD/////Aja0AAAAAAAAIgAg33KEMZ4Vm7n6nBGLCKt33DuDgtPGl+usyf/mbsA9ZdNPDQAAAAAAABYAFK/enJIivPYF2WeNrIVZ3djpDi57AAAAAAj8Am1lA3NpZ0BK2zdTZKcl9R4tysErsozArf7hZoYollWBxvUyDjYXWmnxfx3ZPY1xpWTxHjJozt5XFfRA175YtfuxgrZZ5SMaC/wCbWUGc2lnZXhwCEJ5E4InpTAAGfwCbWUUbWQtY29sbGVjdGlvbjpzeW1ib2wNbGlmZV9pc19jcmF6eQABAR9QwwAAAAAAABYAFK/enJIivPYF2WeNrIVZ3djpDi57AAAA",
                      transactionFeeSats: 459,
                    },
                  ]
        "400":
          description: Invalid request
        "404":
          description: Not found
        "500":
          description: Internal server error

    post:
      summary: Submit Collection Offers
      tags:
        - Bitcoin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                collectionSymbol:
                  type: string
                  example: nodemonkes
                quantity:
                  type: integer
                  example: 1
                priceSats:
                  type: integer
                  example: 100000
                expirationAt:
                  type: string
                  format: date-time
                  example: "2024-12-31T23:59:59Z"
                makerPublicKey:
                  type: string
                  example: "0600db232186bd7de491b45g5e703d6aebaf976b0ce52d721640a1bd3f1f110752"
                makerPaymentType:
                  type: string
                  enum: [p2wpkh, p2sh, p2pkh]
                  example: p2wpkh
                makerReceiveAddress:
                  type: string
                  example: "bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8jzg5"
                offers:
                  type: array
                  items:
                    type: object
                    properties:
                      signedPsbtBase64:
                        type: string
                        example: "cHNidP8BAHcCAAAAAZX6s......."
                      signedCancelPsbtBase64:
                        type: string
                        example: "cHNidP8BAHcCAAAAAZX6s......."
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
              example:
                offerIds: ["abeddc46-6f95-49dd-a604-003807579ea2"]
        "400":
          description: Invalid request
        "404":
          description: Not found
        "500":
          description: Internal server error

  /v2/ord/btc/offers/create:
    get:
      summary: Create Offer for a Token
      tags:
        - Bitcoin
      parameters:
        - name: tokenId
          in: query
          required: true
          schema:
            type: string
          example: ccfb3ea4e5de0caf3236a2073ed6d3365e6b0d5be0c22aa38b2071ac8db644bfi0
        - name: price
          in: query
          required: true
          schema:
            type: integer
          example: 100000
        - name: expirationDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
          example: "2024-12-31T23:59:59Z"
        - name: buyerTokenReceiveAddress
          in: query
          required: true
          schema:
            type: string
          example: "bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8jzg5"
        - name: buyerPaymentAddress
          in: query
          required: true
          schema:
            type: string
          example: "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"
        - name: buyerPaymentPublicKey
          in: query
          required: true
          schema:
            type: string
          example: "0600db232186bd7de491b45g5e703d6aebaf976b0ce52d721640a1bd3f1f110752"
        - name: feerateTier
          in: query
          required: true
          schema:
            type: string
            enum: [halfHourFee, hourFee, fastestFee]
          example: halfHourFee
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
              example:
                psbtBase64: "cHNidP8BAPACAAAAAsx6UqCask/X9MeF/giyBPG9EJQ9H0Rsky9Ye6pU4kUGAAAAAAD/////bp+nvgTTwHoUTK/MH5y6gZOSkw9DiLHTL5PReo9CaTUAAAAAAP////8E6AMAAAAAAAAiUSAntV1h7zEk/Wtemxgeo5DVxzX5IduThtxvIH0Uips25yywAAAAAAAAIlEgNWGFnHtLNlXWAWMBM6gkOEjr8tKo6eumPDpXIzQMGIxlBAAAAAAAABYAFMAVxlJ21fONWZ1EXEywOqeqDcNlSwoAAAAAAAAWABSv3pySIrz2BdlnjayFWd3Y6Q4uewAAAAAAAQEr6AMAAAAAAAAiUSA1YYWce0s2VdYBYwEzqCQ4SOvy0qjp66Y8OlcjNAwYjAEDBAEAAAABFyBykry9chb3FH5Mhswx9ThUHg4CsQWW9bGdZd/eEPER5gABAR9QwwAAAAAAABYAFK/enJIivPYF2WeNrIVZ3djpDi57AAAAAAA="
                toSignSigHash: 1
                toSignInputs: [1]
                toSignOrdinalInputs: []
                tokenId: "68cf53e735004023ff844f363261a131dfce1fe00e7b4a466f75b3ce62292f76i0"
                price: 45000
                expirationDate: "1723229759400"
                buyerReceiveAddress: "bc1py7646c00xyj06667nvvpagus6hrnt7fpmwfcdhr0yp73fz5mxmnsej6egt"
                buyerPaymentAddress: "bc1q4l0fey3zhnmqtkt83kkg2kwamr5sutnmvas999"
                buyerPaymentPublicKey: "03ead7ba6ef3d76a1981aab415913f1532de92de6f8ff29c796c984550e244dce3"
        "400":
          description: Invalid request
        "404":
          description: Not found
        "500":
          description: Internal server error

    post:
      tags:
        - Bitcoin
      summary: Submit a signed offer order for a Bitcoin NFT
      operationId: submitSignedOfferOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signedPSBTBase64:
                  type: string
                  example: "cHNidP8BAHECAAAAAYb6xNH9fhgkTybG4ZH52wKROs..."
                feerateTier:
                  type: string
                  enum: [halfHourFee, hourFee, dayFee]
                  example: halfHourFee
                tokenId:
                  type: string
                  example: ccfb3ea4e5de0caf3236a2073ed6d3365e6b0d5be0c22aa38b2071ac8db644bfi0
                price:
                  type: number
                  format: int64
                  example: 100000
                expirationDate:
                  type: string
                  format: date-time
                  example: "1672531199000"
                buyerPaymentAddress:
                  type: string
                  example: 1BoatSLRHtKNngkdXEeobR76b53LETtpyT
                buyerPaymentPublicKey:
                  type: string
                  example: 0600db232186bd7de491b45g5e703d6aebaf976b0ce52d721640a1bd3f1f110752
                buyerReceiveAddress:
                  type: string
                  example: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
              required:
                - signedPSBTBase64
                - feerateTier
                - tokenId
                - price
                - expirationDate
                - buyerPaymentAddress
                - buyerPaymentPublicKey
                - buyerReceiveAddress
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
              example:
                ok: true
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error

  /v2/ord/btc/collection-offers/collection/{collectionSymbol}:
    get:
      tags:
        - Bitcoin
      summary: Get collection offers for a Bitcoin NFT collection
      operationId: getCollectionOffers
      parameters:
        - name: collectionSymbol
          in: path
          required: true
          schema:
            type: string
          example: nodemonkes
        - name: sort
          in: query
          required: true
          schema:
            type: string
            enum: [priceAsc, priceDesc, dateAsc, dateDesc]
          example: priceDesc
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 100
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 0
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error

  /v2/ord/btc/offers/:
    get:
      tags:
        - Bitcoin
      summary: Retrieve best offers for a specific token.
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [valid, invalid, expired]
          example: valid
          description: Filter offers by status.
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            example: 2
          description: Maximum number of offers to return.
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            example: 0
          description: Number of offers to skip (pagination offset).
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [priceAsc, priceDesc]
          example: priceDesc
          description: Sort offers by price in ascending or descending order.
        - name: token_id
          in: query
          required: true
          schema:
            type: string
          example: ccfb3ea4e5de0caf3236a2073ed6d3365e6b0d5be0c22aa38b2071ac8db644bfi0
          description: The token ID for which offers are retrieved.
        - name: wallet_address_buyer
          in: query
          schema:
            type: string
          required: false
          description: The buyer's wallet address
          example: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh

      responses:
        "200":
          description: Successful response

  /v2/ord/btc/offers/cancel:
    get:
      summary: Retrieve cancel offer format
      tags:
        - Bitcoin
      operationId: retrieveCancelOfferFormat
      parameters:
        - in: query
          name: offerId
          required: true
          schema:
            type: string
          description: The ID of the offer to be cancelled
          example: 6de493e5-4f1d-437d-8aa8-b87368dbe5ab
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
              example:
                offerId: "70bb516f-0864-480e-8960-3e3f6e41a732"
                psbtBase64: "cHNidP8BAPACAAAAAsx6UqCask/X9MeF/giyBPG9EJQ9H0Rsky9Ye6pU4kUGAAAAAAD/////bp+nvgTTwHoUTK/MH5y6gZOSkw9DiLHTL5PReo9CaTUAAAAAAP////8E6AMAAAAAAAAiUSAntV1h7zEk/Wtemxgeo5DVxzX5IduThtxvIH0Uips25yywAAAAAAAAIlEgNWGFnHtLNlXWAWMBM6gkOEjr8tKo6eumPDpXIzQMGIxlBAAAAAAAABYAFMAVxlJ21fONWZ1EXEywOqeqDcNlSwoAAAAAAAAWABSv3pySIrz2BdlnjayFWd3Y6Q4uewAAAAAAAQEr6AMAAAAAAAAiUSA1YYWce0s2VdYBYwEzqCQ4SOvy0qjp66Y8OlcjNAwYjAEDBAEAAAABFyBykry9chb3FH5Mhswx9ThUHg4CsQWW9bGdZd/eEPER5gABAR9QwwAAAAAAABYAFK/enJIivPYF2WeNrIVZ3djpDi57AAAAAAA="
                toSignSigHash: 1
                toSignInputs: [1]
        "400":
          description: Bad request
        "404":
          description: Offer not found
        "500":
          description: Internal server error
    post:
      summary: Submit cancel offer data
      tags:
        - Bitcoin
      operationId: submitCancelOfferData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                offerId:
                  type: string
                  description: The ID of the offer to be cancelled
                  example: 7ab12cd3-45ef-67gh-89ij-klmn12op34qr
                signedPSBTBase64:
                  type: string
                  description: The signed Partially Signed Bitcoin Transaction (PSBT) in Base64 format
                  example: cHNidP8BAHECAAAAAbFNrlBpjUdXy0qFcCUJjkl7AClYQJh53OFWMO9eOZe9AAAAAAD/////AhAnAAAAAAAAFgAUFK4qK4oWGApqikklz1HVyewNfZ4wdQAAAAAAACIAIJnpjiwz0/PmQy8qwtxpzBkb+EGrjf8odZMwKwBzpccAAAAAAAAA
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
              example: true
        "400":
          description: Bad request
        "404":
          description: Offer not found
        "500":
          description: Internal server error

  /v2/ord/btc/psbt/buying:
    get:
      tags:
        - Bitcoin
      summary: Get unsigned data for buying a token
      description: Fetches unsigned data for buying a specific token on Magic Eden
      parameters:
        - name: tokenId
          in: query
          required: true
          schema:
            type: string
          example: "4b31771df21656d2a77e6fa18720a6dd94b04510b9065a7c67250d5c89ad2079i956"
          description: The ID of the token to be purchased
        - name: price
          in: query
          required: true
          schema:
            type: number
          example: 1000000
          description: The price of the token
        - name: buyerAddress
          in: query
          required: true
          schema:
            type: string
          example: "bc1qq0gahtew0mpm58p0e3cjrvlvhlyqxru05zy4ew"
          description: The address of the buyer
        - name: buyerTokenReceiveAddress
          in: query
          required: true
          schema:
            type: string
          example: "bc1p5rw87me62aftc3lgrqpq430gp3rp5wtj4atxz6pum2rmhjhvsk0sx73cgk"
          description: The address where the buyer will receive the token
        - name: buyerPublicKey
          in: query
          required: true
          schema:
            type: string
          example: "030b084f1911fe71154e981e3e6b5c1ed08d4d3b6b8d1d4a53e9d2ed7435d6e18b"
          description: The public key of the buyer
        - name: feerateTier
          in: query
          required: true
          schema:
            type: string
          example: "hourFee"
          description: The fee rate tier for the transaction
        - name: creatorTipsType
          in: query
          required: true
          schema:
            type: string
          example: "none"
          description: The type of creator tips
      responses:
        "200":
          description: Successfully fetched unsigned data
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error

    post:
      tags:
        - Bitcoin
      summary: Submit signed data to Magic Eden
      description: Submits signed data for buying on Magic Eden
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dryRun:
                  type: boolean
                  description: Whether to perform a dry run
                  example: false
                signedBuyingPSBTBase64:
                  type: string
                  description: Base64 encoded PSBT for buying
                  example: "cHNidP8BAPgdgrAAAEcnzstJ7XhgPCk6l63rVHgySyjBIHoCobpd4jpvnux6kEAAAAAP/////BPNyBhF6gxKJuC4jb1DJ/1KgdfgM7oLFKIi3MDVJPqgUAAAAA/////zur10W9tqFSUzRf69Sn1OD3tV76bvhHwQEAo0OQ9PlxAAAAAAD/////xljd2tVsDTwJd9WN3sVUJG4Bzgz2jThGGnJLCC89upcGAAAAAP////8HsAQAAAAAAAAWABT4MCiSPhSF/p6VrF0+r3y0iwTH8dfgdfgAAAIlEgQ8VhInqtACKdpIauqkGuXtMJ5zzrjW1FIheFAS7BrIkvDgAAAAAAACJRIJY438AjP3WM33Vk6mL2EDctuYahBwtWi9b9dFfBrQfERAIAAAAAAAAWABTAFcZSdtXzjVmdRFxMsDqnqg3DZVgCAAAAAAAAFgAU+DAokj4Uhf6elaxdPq98tIsEx/JYAgAAAAAAABYAFPgwKJI+FIX+npWsXT6vfLSLBMfygP5QAAAAAAAWABT4MCiSPhSF/p6VrF0+r3y0iwTH8gAAAAAI/AJtZQNzaWdAw67zmcNRHqsC5MhipR7aH1JQhOLUb7KAZI2Kn4txE3xgdfg9AOvZLteFqUXwCiNxTC5Nn0z8zj12Cw9oHMdSwv8Am1lBnNpZ2V4cAhCeRL40crgAAABAR9YAgAAAAAAABYAFPgwKJI+FIX+npWsXT6vfLSLBMfyIgIDHaQkL11ywhrNVYqvzPBZWJdWi4vDFImfvE2S6voMbKBIMEUCIQD6rmamhoJJZaMQaoumuIpNUj9KcF/o2+cjo38XLX5VLAIgE1pgN+AJJCykoesDLCJfcPxMDXcg79KsExo8Bp4FHIcBAAEBH1gCAAAAAAAAFgAU+DAokj4Uhf6elaxdPq98tIsEx/IiAgMdpCQvXXLCGs1Viq/M8FlYl1aLi8MUiZ+8TZLq+gxsoEggfdgMuTHq7ATfK457yToxPh88MDkVZ+N/oYUK7AVeOGl5egAiBPEihA+LtiYmbYCg+FeRA9p094aTMCl2z8YVOetFs/KAEAAQErIgIAAAAAAAAiUSCWON/AIz91jN91ZOpi9hA3LbmGoQcLVovW/XRXwa0HxAEDBIMAAAAAAQEfrR1RAAAAAAAWABT4MCiSPhSF/p6VrF0+r3y0iwTH8iICAx2kJC9dcsIazVWKr8zwWViXVouLwxSJn7xNkur6DGygRzBEAiAkHHOZOVXy+4xISH80b85nDy0GYbiUSsQ5G0aHhvkVvgIgWLTDsYZrmHcrOchFaAVHD8QzRc7EFwH+pixnJ9U4X3YBAAAAAAAAAAA="
                feerateTier:
                  type: string
                  description: The fee rate tier
                  example: "halfHourFee"
                creatorTipsType:
                  type: string
                  description: The type of creator tips
                  example: "none"
                price:
                  type: number
                  description: The price for buying
                  example: 3100
                tokenId:
                  type: string
                  description: The token ID of the asset
                  example: "71f9f49043fgdfg01c147f86efa5eb5f7e0d4a7d4eb5f345352a1b6bd45d7ab3bi0"
                buyerAddress:
                  type: string
                  description: The address of the buyer
                  example: "bc1qlqcz3ygdfgdfa85443wnatmukj9sf3ljkqe3mj"
                buyerTokenReceiveAddress:
                  type: string
                  description: The address where the buyer will receive the token
                  example: "bc1pg0zkzgn64gdfgrre25sdwtmfsneeuawxk63fzz7zsztkp4jyssfgqq5"
                walletSource:
                  type: string
                  description: The source of the wallet
                  example: "magic_eden"
      responses:
        "200":
          description: Successfully submitted signed data
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error

  /v2/instructions/batch:
    get:
      tags:
        - Solana
      summary: Get batch instructions for transactions
      description: Fetches batch instructions for transactions on Magic Eden
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          example: '[{"type":"tensor_single_buynow_cnft","ins":{"buyer":"EfdC1uyq5gWqHQYxSENscwNZKY8k2z8CXkpmPRB7mn2N","seller":"GVhpewzamLhgEaB6QTTAeymhXiL1Tk1GmjjL3hT7chHo","assetId":"DmdF3ACqvjmRh4mayaw3SAKuttVQ3tZkmut1N4RxSLCG","price":0.00001}}]'
          description: A JSON string representing an array of instruction objects, URL encoded
        - name: prioFeeMicroLamports
          in: query
          required: true
          schema:
            type: integer
          example: 100000
          description: The priority fee in micro lamports
        - name: maxPrioFeeLamports
          in: query
          required: true
          schema:
            type: integer
          example: 300000
          description: The maximum priority fee in lamports
      responses:
        "200":
          description: Successfully fetched batch instructions
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error

  /v3/rtp/{chain}/execute/buy/v7:
    post:
      tags:
        - EVM
      summary: Execute a buy operation on Magic Eden
      description: Submits a request to buy items on Magic Eden

      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]
          description: The blockchain on which to buy
          example: ethereum
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        description: The key of the item
                        example: "0x932261f9fc8da46c4a22e31b45c4de60623848bf:381092"
                      token:
                        type: string
                        description: The token of the item
                        example: "0x932261f9fc8da46c4a22e31b45c4de60623848bf:381092"
                      is1155:
                        type: boolean
                        description: Whether the item is an ERC-1155 token
                        example: false
                      source:
                        type: string
                        description: The source market of the item
                        example: "element.market"
                      quantity:
                        type: integer
                        description: The quantity of the item to buy
                        example: 1
                taker:
                  type: string
                  description: The address of the taker
                  example: "0x9adcFFff1DEf95F7E58B587c1A6B06Ac6A7aE1E5"
                source:
                  type: string
                  description: The source of the request
                  example: "magiceden.io"
                partial:
                  type: boolean
                  description: Whether the buy operation is partial
                  example: true
                currency:
                  type: string
                  description: The address of the currency used for the transaction
                  example: "0x0000000000000000000000000000000000000000"
                currencyChainId:
                  type: integer
                  description: The chain ID of the currency
                  example: 1
                forwarderChannel:
                  type: string
                  description: The forwarder channel
                  example: "0x5ebc127fae83ed5bdd91fc6a5f5767E259dF5642"
                normalizeRoyalties:
                  type: boolean
                  description: Whether to normalize royalties
                  example: false
      responses:
        "200":
          description: Successfully executed buy operation
          content:
            application/json:
              schema:
                type: object
              example:
                "requestId": "a2e382d5-4e92-4c2b-9b54-b7e685b6a271"
                "steps":
                  [
                    {
                      "id": "sale",
                      "action": "Confirm transaction in your wallet",
                      "description": "To purchase this item you must confirm the transaction and pay the gas fee",
                      "kind": "transaction",
                      "items":
                        [
                          {
                            "status": "incomplete",
                            "orderIds":
                              [
                                "0x6ba7a654a1a748319da50ff508b17bab29dd279d7a6a7ea3c09edc47d595c228",
                              ],
                            "data":
                              {
                                "from": "0x9adcffff1def95f7e58b587c1a6b06ac6a7ae1e5",
                                "to": "0xc2c862322e9c97d6244a3506655da95f05246fd8",
                                "data": "0x760f2a0b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d8f24f5f0382e197c1e87ad82b357209383470cf00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000001c6bf52634000000000000000000000000000000000000000000000000000000000000000078476af662900000000000000000000000000000000000000000000000000000000000000c00000000000000000000000009adcffff1def95f7e58b587c1a6b06ac6a7ae1e50000000000000000000000009adcffff1def95f7e58b587c1a6b06ac6a7ae1e500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000001c6bf52634000000000000000000000000000000000000000000000000000000000000000076000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000006800000000000000000000000000b818dc9d41732617dfc5bc8dff03dac632780e1000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c00000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000006694ad1c0000000000000000000000000000000000000000000000000000000066f0f61c000000000000000000000000000000000000000000000000000000000000000072db8c0b0000000000000000000000000000000000000000d5c510e2083083600000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000076be3b62873462d2142405439777e971754e8e7700000000000000000000000000000000000000000000000000000000000029ed000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b06fb1f20f800000000000000000000000000000000000000000000000000001b06fb1f20f8000000000000000000000000000b818dc9d41732617dfc5bc8dff03dac632780e1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026a74d672800000000000000000000000000000000000000000000000000000026a74d6728000000000000000000000000000000a26b00c1f0df003000390027140000faa719000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000305120c0f2000000000000000000000000000000000000000000000000000000305120c0f2000000000000000000000000000157e23d3e68ac6f99334b8b0fe71f0eb844911dd0000000000000000000000000000000000000000000000000000000000000123c51234595b2cc3bff9d0223b33f04f9802440164f3aba66c2e0d4935bf39c825346b91271c0078ff7a153f2b2014e8f2726abd905fff3824dc470e14dd59843a00001f99d25aace64f4ab1e45c1e3a702669957d039a4adb805b8d768ee24ec5fd4bf9e721ab5709b34b38ab9bb023327eb3a967cf962fa620f42ff363f03d7fba436c142899c4946e506562968e433cc72ff875915d36560a07bf8f52a5b10103260b5772fa6456b24cb4ed596e53dca479d64bdbcfd5bdef1ee761b2b794e0ecae5d18c8629844a57d385d3b6dda4c7ec2e580f3ddb911c6a188d7c086b2ac0a0684f9a6cc0e3a19b60d5da243ad2f2cf335f708108b8b3f59fdcca62cf4f63a0ddabf556e0b31c15b9a65eec697ce1f684d59b833508e922ec86e06fd1918e5db6e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d4da48b0e1c0c38",
                                "value": "0x01c6bf52634000",
                              },
                            "check":
                              {
                                "endpoint": "/execute/status/v1",
                                "method": "POST",
                                "body": { "kind": "transaction" },
                              },
                            "gasEstimate": 160000,
                          },
                        ],
                    },
                  ]
                "errors": []
                "path":
                  [
                    {
                      "orderId": "0x6ba7a654a1a748319da50ff508b17bab29dd279d7a6a7ea3c09edc47d595c228",
                      "contract": "0x76be3b62873462d2142405439777e971754e8e77",
                      "tokenId": "10733",
                      "quantity": 1,
                      "source": "opensea.io",
                      "currency": "0x0000000000000000000000000000000000000000",
                      "currencySymbol": "ETH",
                      "currencyDecimals": 18,
                      "quote": 0.0005,
                      "rawQuote": "500000000000000",
                      "builtInFees":
                        [
                          {
                            "kind": "marketplace",
                            "recipient": "0x0000a26b00c1f0df003000390027140000faa719",
                            "bps": 50,
                            "amount": 0,
                            "rawAmount": "2500000000000",
                          },
                          {
                            "kind": "royalty",
                            "recipient": "0x157e23d3e68ac6f99334b8b0fe71f0eb844911dd",
                            "bps": 1000,
                            "amount": 0.00005,
                            "rawAmount": "50000000000000",
                          },
                        ],
                      "isNativeOffChainCancellable": false,
                      "feesOnTop": [],
                      "totalPrice": 0.0005,
                      "totalRawPrice": "500000000000000",
                    },
                  ]
                "fees":
                  {
                    "gas":
                      {
                        "currency":
                          {
                            "contract": "0x0000000000000000000000000000000000000000",
                            "name": "Ether",
                            "symbol": "ETH",
                            "decimals": 18,
                          },
                        "amount":
                          {
                            "raw": "487128952320000",
                            "decimal": 0.00049,
                            "usd": 1.14066,
                            "native": null,
                          },
                      },
                  }

        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error

  /v3/rtp/{chain}/execute/cancel-signature/v1:
    post:
      tags:
        - EVM
      summary: Cancel an order on Magic Eden
      description: Submits a request to cancel an order on Magic Eden
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            enum: ["ethereum", "base", "polygon"]

        - name: signature
          in: query
          required: true
          description: The signature to cancel
          schema:
            type: string
            example: "0xbb12a8766e224f92sdfewfwe54d5800e6d2a0c0edbb736b070c1f1b01adb69a43fa7358df69b37b4c8a96e57a5d5447c86b68eb18d0673bcfcbf8451051b612a1c"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderIds:
                  type: array
                  items:
                    type: string
                  description: List of order IDs to cancel
                  example:
                    [
                      "0x41435aa8cc2ddfsdfef6b8d9b9f0b336a7fddb570ea510e4f235ff5d26d",
                    ]
                orderKind:
                  type: string
                  description: The kind of order
                  example: "payment-processor-v2"
      responses:
        "200":
          description: Successfully canceled the signature
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error

  /v2/ord/btc/psbt/sweeping:
    post:
      tags:
        - Bitcoin
      summary: Submit PSBT Sweeping Request
      description: Use this endpoint to submit a PSBT sweeping request for Bitcoin with the specified tokens and fees.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tokens:
                  type: array
                  items:
                    type: object
                    properties:
                      tokenId:
                        type: string
                        example: "18287fc566c3f4026cbfb2b5255fbaf93c13fsdfs25930bbdbc2b579901ai0"
                      price:
                        type: integer
                        example: 3000
                makerFee:
                  type: integer
                  example: 15
                takerFee:
                  type: integer
                  example: 60
                unsignedSweepingPSBTBase64:
                  type: string
                  example: "cHNidP8BAP2fAQIAAAAEIGSjPi8KSmM3UZ9n3NYhXuNEJTfsdfD02xiD4FAAAAAP/////BPNyBhF6gxKJuC4jb1DJ/1KTVjSM7oLFKIi3MDVJPqgQAAAAA/////xqQebXC27swWYIZY0B7Ezz5ul8ltbKfsdfbFfygYAAAAAAD/////XCONxbXxpRhug2/rYz5BUP+DSO1jfxv0UWAvwa+iALUAAAAAAP////8HsAQAAAAAAAAWABT4MCiSPhSF/p6VrF0+r3y0iwTH8iICAAAAAAAAIlEgQ8VhInqtACKdpIauqkGuXtMJ5zzrjW1FIheFAS7BrInLDQAAAAAAACJRIFNV1KTkRobO3JEGKTWTJxQYsqykGIG97w9AFgCgwC3KRAIAAAAAAAAWABTAFcZSdtXzjVmdRFxMsDqnqg3DZVgCAAAAAAAAFgAU+DAokj4Uhf6elaxdPq98tIsEx/JYAgAAAAAAABYAFPgwKJI+FIX+npWsXT6vfLSLBMdsfsAAWABT4MCiSPhSF/p6VrF0+r3y0iwTH8gAAAAAI/AJtZQNzaWdAhqcuxOVUb71bTnMITg5jdjp62f5VvS98jaJZrgackvgf1QE+hVlW9yGZ6t+Mn86mnYJhM5B29Qqv6/o832ASiAv8Am1lBnNpZ2V4cAhCeRL4sVXgAAABAR9YAgAAAAAAABYAFPgwKJI+FIX+npWsXT6vfLSLBMfyAAEBH1gCAAAAAAAAFgAU+DAokj4Uhf6elaxdPq98tIsEx/IAAQErIgIAAAAAAAAiUSBTVdSk5EaGztyRBik1kycUGLKspBiBve8PQBYAoMAtygEDBIMAAAABFyDmzeovzoqDuJYHMO9GQJ2c7+LnGZwynAcY/HQvNLB0pQABAR92PFEAAAAAABYAFPgwKJI+FIX+npWsXT6vfLSLBMfyAAAAAAAAAAA="
                buyerAddress:
                  type: string
                  example: "bc1qlqcz3y3fsdf85443wnatmukj9sf3ljkqe3mj"
                buyerTokenReceiveAddress:
                  type: string
                  example: "bc1pg0zkzgn645qz98dys6h2sdfxk63fzz7zsztkp4jyssfgqq5"
                toSignInputs:
                  type: array
                  items:
                    type: integer
                  example: [0, 1, 3]
                signature:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        example: "bc1qlqcz3y37zjfdsukj9sf3ljkqe3mj"
                      signingIndexes:
                        type: array
                        items:
                          type: integer
                        example: [0, 1, 3]
                toSignSigHash:
                  type: integer
                  example: 1
                failedTokenIds:
                  type: array
                  items:
                    type: string
                  example: []
                conflictOffers:
                  type: array
                  items:
                    type: object
                  example: []
                signedSweepingPSBTBase64:
                  type: string
                  example: "cHNidP8BAP2fAQIAAAAEsdf8KSmM3UZ9n3NYhXuNEJT1IArOU3ra6D02xiD4FAAAAAP/////BPNyBhF6gxKJuC4jb1DJ/1KTVjSM7oLFKIi3MDVJPqgQAAAAA/////xqQebXC27swWYIZY0B7Ezz5ul8ltbK/bAL0w2bFfygYAAAAAAD/////XCONxbsdfug2/rYz5BUP+DSO1jfxv0UWAvwa+iALUAAAAAAP////8HsAQAAAAAAAAWABT4MCiSPhSF/p6VrF0+r3y0iwTH8iICAAAAAAAAIlEgQ8VhInqtACKdpIauqkGuXtMJ5zzrjW1FIheFAS7BrInLDQAAAAAAACJRIFNV1KTkRobO3JEGKTWTJxQYsqykGIG97w9AFgCgwC3KRAIAAAAAAAAWABTAFcZSdtXzjVmdRFxMsDqnqg3DZVgCAAAAAAAAFgAU+DAokj4Uhf6elaxdPq98tIsEx/JYAgAAAAAAABYAFPgwKJI+FIX+npWsXT6vfLSLBMfyrR1RAAAAAAAWABT4MCiSPhSF/p6VrF0+r3y0iwTH8gAAAAAI/AJtZQNzaWdAhqcuxOVUb71bTnMITg5jdjp62f5VvS98jaJZrgackvgf1QE+hVlW9yGZ6t+Mn86sdf29Qqv6/o832ASiAv8Am1lBnNpZ2V4cAhCeRL4sVXgAAABAR9YAgAAAAAAABYAFPgwKJI+FIX+npWsXT6vfLSLBMfyIgIDHaQkL11ywhrNVYqvzPBZWJdWi4vDFImfvE2S6voMbKBIMEUCIQDr6FaGHLWhERi/FcNJurtcws0mbrONOwOhWC3ZhSg3GQIgffjr8zGwBCd0cfqR9NMdDYWrWIvm7EIgHRNio3lV9u0BAAEBH1gCAAAAAAAAFgAU+DAokj4Uhf6elaxdPq98tIsEx/IiAgMdpCQvXXLCGs1Viq/M8FlYl1aLi8MUiZ+8TZLq+gxsoEgwRQIhAKQ/Vc6POfcxcJr4S72ti+xPvb1D57nhz4nOqqpE/2AlAiAfsMRM0MrdoF97qHc66kbUEAw9PjHG6mVkjyDm3ayB8QEAAQErIgIAAAAAAAAiUSBTVdSk5EaGztyRBik1kycUGLKspBiBve8PQBYAoMAtygEDBIMAAAABFyDmzeovzoqDuJYHMO9GQJ2c7+LnGZsdfABAR92PFEAAAAAABYAFPgwKJI+FIX+npWsXT6vfLSLBMfyIgIDHaQkL11ywhrNVYqvzPBZWJdWi4vDFImfvE2S6voMbKBHMEQCIE7FAxU/rXbBEvnyquxCJboCAZMvKge45S6GstKBk6teAiBNdzNoIIMFz6qf4C65wqmN9Nq3w3+eqa1zTsySXYzyTAEAAAAAAAAAAA=="
                dryRun:
                  type: boolean
                  example: false
                creatorTipsType:
                  type: string
                  example: "none"
                walletSource:
                  type: string
                  example: "magic_eden"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Success"
                  transactionId:
                    type: string
                    example: "abc123"
                  message:
                    type: string
                    example: "Transaction completed successfully."
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request data"

  /sdk/{apiKey}/nonce:
    get:
      summary: Retrieve Nonce
      description: Returns a nonce for the provided API key.
      parameters:
        - name: apiKey
          in: path
          required: true
          description: The API key associated with the Magic Eden SDK.
          schema:
            type: string
            example: c1314b5b-ece8-4b4f-a879-3894dda364e4
      responses:
        "200":
          description: A nonce for authentication.s
        "400":
          description: Invalid API key.
        "500":
          description: Server error.

  /sdk/{apiKey}/verify:
    post:
      summary: Verify Signed Message
      description: Verifies a signed message and returns the verification status.
      parameters:
        - name: apiKey
          in: path
          required: true
          description: The API key associated with the Magic Eden SDK.
          schema:
            type: string
            example: c1314b5b-ece8-4b4f-a879-3894dda364e4
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                signedMessage:
                  type: string
                  description: The signed message to verify.
                  example: "0xff38d9gfgfd96469e62ad970493f101463a6837644d68487389052ebea11564e5dcf99c5d4a495243afa20e3c5476614d284136160c4gdfg8384a572de1c"
                messageToSign:
                  type: string
                  description: The message that was signed.
                  example: "magiceden.io wants you to sign in with your Ethereum account:\n0xe61dcC9gdfgdf97a1ba7Af2781361f58e7A\n\nWelcome to Magic Eden. Signing is the only way we can truly know that you are the owner of the wallet you are connecting. Signing is a safe, gas-less transaction that does not in any way give Magic Eden permission to perform any transactions with your wallet.\n\nURI: https://magiceden.io/\nVersion: 1\nChain ID: 1\nNonce: 4545e1668a55gdgfdf31bbe10288f00\nIssued At: 2024-08-08T09:55:43.997Z\nRequest ID: c131gdfg4b5b-ece8-4b4f-a879-3894ddfgd64e4"
                publicWalletAddress:
                  type: string
                  description: The public wallet address used to sign the message.
                  example: "0xe61dcC958fc886gdfgdf1361f5gdfg"
                chain:
                  type: string
                  description: The blockchain network used.
                  example: "EVM"
                walletName:
                  type: string
                  description: The name of the wallet used to sign the message.
                  example: "metamask"
                walletProvider:
                  type: string
                  description: The provider of the wallet used to sign the message.
                  example: "browserExtension"
                network:
                  type: string
                  description: The network ID where the wallet is operating.
                  example: "1"
                additionalWalletAddresses:
                  type: array
                  description: Additional wallet addresses if applicable.
                  items:
                    type: string
                  example: []
      responses:
        "200":
          description: Verification successful.
        "400":
          description: Bad request, e.g., missing or invalid parameters.
        "500":
          description: Server error.
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-NFT-API-Key
    cookieAuth:
      type: apiKey
      in: header
      name: Cookie
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
